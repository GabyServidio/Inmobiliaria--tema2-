/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import Entidades.Inmueble;
import Entidades.Persona;
import java.awt.Component;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Veronica Porqueras
 */
public class ListarInmuebles extends javax.swing.JDialog {

    /**
     * Creates new form ListarInmjebles
     */
    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    public ListarInmuebles(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Listar Inmuebles");
        initComponents();
        llenarCombo();
        cabecera();
        cargarTabla();
        ajustarAnchoColumnas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtDato = new javax.swing.JTextField();
        jcbOpcion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtInmueble = new javax.swing.JTable();
        jbContratar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbInspeccionar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1100, 400));
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Seleccione por que desea listar:");

        jtDato.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDatoMouseClicked(evt);
            }
        });
        jtDato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtDatoActionPerformed(evt);
            }
        });
        jtDato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtDatoKeyReleased(evt);
            }
        });

        jcbOpcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbOpcionActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 800));

        jtInmueble.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtInmueble);

        jbContratar.setText("Contratar");

        jbEditar.setText("Editar");

        jbInspeccionar.setText("Inspeccionar");

        jbSalir.setText("SALIR");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1078, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtDato, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbContratar)
                        .addGap(18, 18, 18)
                        .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbInspeccionar)
                        .addGap(38, 38, 38)
                        .addComponent(jbSalir)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbContratar)
                    .addComponent(jbEditar)
                    .addComponent(jbInspeccionar)
                    .addComponent(jbSalir))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtDato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbOpcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbOpcionActionPerformed
        cambiarInfo();
    }//GEN-LAST:event_jcbOpcionActionPerformed

    private void jtDatoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtDatoKeyReleased
        limpiarFila();
        buscar();
    }//GEN-LAST:event_jtDatoKeyReleased

    private void jtDatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtDatoActionPerformed
       
    }//GEN-LAST:event_jtDatoActionPerformed

    private void jtDatoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDatoMouseClicked
        jtDato.setText("");
    }//GEN-LAST:event_jtDatoMouseClicked

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarInmuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarInmuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarInmuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarInmuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ListarInmuebles dialog = new ListarInmuebles(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbContratar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbInspeccionar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<String> jcbOpcion;
    private javax.swing.JTextField jtDato;
    private javax.swing.JTable jtInmueble;
    // End of variables declaration//GEN-END:variables
    private void llenarCombo() {
        jcbOpcion.addItem("Direccion");
        jcbOpcion.addItem("Zona");
        jcbOpcion.addItem("Propietario");
        jcbOpcion.addItem("Codigo");

    }

    private void cabecera() {
        modelo.addColumn("Código");
        modelo.addColumn("Zona");
        modelo.addColumn("Direccion");
        modelo.addColumn("Ambientes");
        modelo.addColumn("Superficie");
        modelo.addColumn("Garage");
        modelo.addColumn("Baños");
        modelo.addColumn("Condiociones Contrato");
        modelo.addColumn("Fecha Construccion");
        modelo.addColumn("Propietario");
        modelo.addColumn("Estado");
        modelo.addColumn("Tipo");
        jtInmueble.setModel(modelo);
    }

    private void cargarTabla() {
        for (Inmueble inmueble : MVendedor.controlInm.listarInmueble()) {
            Persona propietario = MVendedor.controlPer.encontrarPersonaXId(inmueble.getIdPropietario());
            modelo.addRow(new Object[]{
                inmueble.getId(),
                inmueble.getZona(),
                inmueble.getDireccion(),
                inmueble.getCantAmbientes(),
                inmueble.getSuperficie(),
                inmueble.getGarage(),
                inmueble.getCanBaños(),
                inmueble.getCondicionesContrato(),
                inmueble.getFechaConstruccion(),
                propietario.getApellido().concat(", ").concat(propietario.getNombre()),
                inmueble.getEstadoInmueble(),
                inmueble.getTipo()
            });
        }

    }

    private void limpiarFila() {
        int f = modelo.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    private void ajustarAnchoColumnas() {
        for (int column = 0; column < jtInmueble.getColumnCount(); column++) {
            TableColumn tableColumn = jtInmueble.getColumnModel().getColumn(column);
            int anchoPreferido = tableColumn.getMinWidth();
            int anchoMaximo = tableColumn.getMaxWidth();

            for (int row = 0; row < jtInmueble.getRowCount(); row++) {
                TableCellRenderer cellRenderer = jtInmueble.getCellRenderer(row, column);
                Component c = jtInmueble.prepareRenderer(cellRenderer, row, column);
                int ancho = c.getPreferredSize().width + jtInmueble.getIntercellSpacing().width;
                anchoPreferido = Math.max(anchoPreferido, ancho);

                // Ajuste para evitar que el ancho de la columna supere el ancho máximo establecido.
                if (anchoPreferido >= anchoMaximo) {
                    anchoPreferido = anchoMaximo;
                    break;
                }
            }
            tableColumn.setPreferredWidth(anchoPreferido);
        }
    }

    private void cambiarInfo() {
        String opcion = jcbOpcion.getSelectedItem().toString();

        switch (opcion) {
            case "Direccion":
                jtDato.setText("Ingrese la direccion del Inmueble");

                break;
            case "Zona":
                jtDato.setText("Ingrese la Zona");
                break;
            case "Propietario":
                jtDato.setText("Ingrese el DNI del propietario");
                break;

            case "Codigo":
                jtDato.setText("Ingrese el numero de Codigo de la propiedad");
                break;

        }

    }

    private void buscar() {
        String opcion = jcbOpcion.getSelectedItem().toString();
        switch (opcion) {
            case "Direccion":
                
                for (Inmueble inmueble : MVendedor.controlInm.listarInmueble()) {
                    System.out.println(inmueble.getDireccion().toLowerCase().startsWith(jtDato.getText().toLowerCase()));
                    if (inmueble.getDireccion().toLowerCase().startsWith(jtDato.getText().toLowerCase())) {
                        Persona propietario = MVendedor.controlPer.encontrarPersonaXId(inmueble.getIdPropietario());
                        System.out.println("entro");
                        modelo.addRow(new Object[]{
                            inmueble.getId(),
                            inmueble.getZona(),
                            inmueble.getDireccion(),
                            inmueble.getCantAmbientes(),
                            inmueble.getSuperficie(),
                            inmueble.getGarage(),
                            inmueble.getCanBaños(),
                            inmueble.getCondicionesContrato(),
                            inmueble.getFechaConstruccion(),
                            propietario.getApellido().concat(", ").concat(propietario.getNombre()),
                            inmueble.getEstadoInmueble(),
                            inmueble.getTipo()
                        });
                    }
                }

            break;
            case "Zona":
                
                for (Inmueble inmueble : MVendedor.controlInm.listarInmueble()) {
                    if (inmueble.getZona().toLowerCase().startsWith(jtDato.getText().toLowerCase())) {
                        Persona propietario = MVendedor.controlPer.encontrarPersonaXId(inmueble.getIdPropietario());
                        modelo.addRow(new Object[]{
                            inmueble.getId(),
                            inmueble.getZona(),
                            inmueble.getDireccion(),
                            inmueble.getCantAmbientes(),
                            inmueble.getSuperficie(),
                            inmueble.getGarage(),
                            inmueble.getCanBaños(),
                            inmueble.getCondicionesContrato(),
                            inmueble.getFechaConstruccion(),
                            propietario.getApellido().concat(", ").concat(propietario.getNombre()),
                            inmueble.getEstadoInmueble(),
                            inmueble.getTipo()
                        });
                    }
                }
            break;
            case "Propietario":
                
                for (Persona propietario : MVendedor.controlPer.listarPropietarios()) {
                    String dni = propietario.getDni() + "";

                    if (dni.startsWith(jtDato.getText())) {
                        Inmueble inmueble = MVendedor.controlInm.buscarInmueble(propietario.getId());
                        modelo.addRow(new Object[]{
                            inmueble.getId(),
                            inmueble.getZona(),
                            inmueble.getDireccion(),
                            inmueble.getCantAmbientes(),
                            inmueble.getSuperficie(),
                            inmueble.getGarage(),
                            inmueble.getCanBaños(),
                            inmueble.getCondicionesContrato(),
                            inmueble.getFechaConstruccion(),
                            propietario.getApellido().concat(", ").concat(propietario.getNombre()),
                            inmueble.getEstadoInmueble(),
                            inmueble.getTipo()
                        });
                    }
                }
            break;

            case "Codigo":
                
                for (Inmueble inmueble : MVendedor.controlInm.listarInmueble()) {
                    if (inmueble.getId() == Integer.parseInt(jtDato.getText())) {
                        Persona propietario = MVendedor.controlPer.encontrarPersonaXId(inmueble.getIdPropietario());
                        modelo.addRow(new Object[]{
                            inmueble.getId(),
                            inmueble.getZona(),
                            inmueble.getDireccion(),
                            inmueble.getCantAmbientes(),
                            inmueble.getSuperficie(),
                            inmueble.getGarage(),
                            inmueble.getCanBaños(),
                            inmueble.getCondicionesContrato(),
                            inmueble.getFechaConstruccion(),
                            propietario.getApellido().concat(", ").concat(propietario.getNombre()),
                            inmueble.getEstadoInmueble(),
                            inmueble.getTipo()
                        });
                    }
                }
            break;
        }
    }
}
