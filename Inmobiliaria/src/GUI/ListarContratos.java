/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import AccesoADatos.UsuarioData;
import Entidades.Contrato;
import Entidades.Inmueble;
import Entidades.Persona;
import Entidades.Usuario;
import static GUI.MVendedor.fuenteBoton12;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ferna
 */
public class ListarContratos extends javax.swing.JDialog {

    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    private UsuarioData controlUsuario = new UsuarioData();
    DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private Font button = MVendedor.fuenteBoton18;
    private Font label = MVendedor.fuenteLabel;

    public ListarContratos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Listar Contratos");
        initComponents();
        
        jMes.addPropertyChangeListener("month", e -> buscar());
        jAnio.addPropertyChangeListener("year", e -> buscar());
        llenarCombo();
        cabecera();
        cargarTabla();
        ajustarAnchoColumnas();
        initFont();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jcbEstado = new javax.swing.JComboBox<>();
        jMes = new com.toedter.calendar.JMonthChooser();
        jAnio = new com.toedter.calendar.JYearChooser();
        jtDato = new javax.swing.JTextField();
        jcbOpcion = new javax.swing.JComboBox<>();
        jbBuscar = new javax.swing.JButton();
        jbRenovar = new javax.swing.JButton();
        jbRescindir = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtContratos = new javax.swing.JTable();
        BG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jcbEstado.setBackground(new java.awt.Color(23, 80, 109));
        jcbEstado.setForeground(new java.awt.Color(255, 255, 255));
        jcbEstado.setBorder(null);
        jcbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEstadoActionPerformed(evt);
            }
        });
        jPanel1.add(jcbEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 8, 130, 45));

        jMes.setBackground(new java.awt.Color(23, 80, 109));
        jMes.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jMes, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 8, 130, 45));

        jAnio.setBackground(new java.awt.Color(23, 80, 109));
        jPanel1.add(jAnio, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 8, -1, 45));

        jtDato.setBackground(new java.awt.Color(23, 80, 109));
        jtDato.setForeground(new java.awt.Color(255, 255, 255));
        jtDato.setBorder(null);
        jtDato.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDatoMouseClicked(evt);
            }
        });
        jtDato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtDatoActionPerformed(evt);
            }
        });
        jtDato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtDatoKeyTyped(evt);
            }
        });
        jPanel1.add(jtDato, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 8, 290, 45));

        jcbOpcion.setBackground(new java.awt.Color(23, 80, 109));
        jcbOpcion.setForeground(new java.awt.Color(255, 255, 255));
        jcbOpcion.setBorder(null);
        jcbOpcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbOpcionActionPerformed(evt);
            }
        });
        jPanel1.add(jcbOpcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, 140, 45));

        jbBuscar.setBackground(new java.awt.Color(23, 80, 119));
        jbBuscar.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jbBuscar.setForeground(new java.awt.Color(255, 255, 255));
        jbBuscar.setText("BUSCAR");
        jbBuscar.setBorder(null);
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(jbBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, 42));

        jbRenovar.setBackground(new java.awt.Color(23, 80, 119));
        jbRenovar.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jbRenovar.setForeground(new java.awt.Color(255, 255, 255));
        jbRenovar.setText("RENOVAR");
        jbRenovar.setBorder(null);
        jbRenovar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRenovarActionPerformed(evt);
            }
        });
        jPanel1.add(jbRenovar, new org.netbeans.lib.awtextra.AbsoluteConstraints(627, 10, -1, 42));

        jbRescindir.setBackground(new java.awt.Color(23, 80, 119));
        jbRescindir.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jbRescindir.setForeground(new java.awt.Color(255, 255, 255));
        jbRescindir.setText("RESCINDIR");
        jbRescindir.setBorder(null);
        jbRescindir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRescindirActionPerformed(evt);
            }
        });
        jPanel1.add(jbRescindir, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, -1, 42));

        jbSalir.setBackground(new java.awt.Color(23, 80, 119));
        jbSalir.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jbSalir.setForeground(new java.awt.Color(255, 255, 255));
        jbSalir.setText("SALIR");
        jbSalir.setBorder(null);
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });
        jPanel1.add(jbSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 10, -1, 42));

        jScrollPane1.setOpaque(false);

        jtContratos.setBackground(new java.awt.Color(23, 80, 119));
        jtContratos.setForeground(new java.awt.Color(255, 255, 255));
        jtContratos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtContratos.setOpaque(false);
        jScrollPane1.setViewportView(jtContratos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 980, 380));

        BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/BG_ListarContactos.png"))); // NOI18N
        jPanel1.add(BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtDatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtDatoActionPerformed
        jtDato.setText("");
    }//GEN-LAST:event_jtDatoActionPerformed

    private void jtDatoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtDatoKeyTyped
        char c = evt.getKeyChar();
        switch (jcbOpcion.getSelectedItem().toString()) {
            case "Propietario":
                if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_ENTER) {
                    evt.consume(); // Consumir el evento si no es una letra o espacio
                    JOptionPane.showMessageDialog(null, "Solo se pueden poner Numeros");
                } else if (c == KeyEvent.VK_ENTER) {
                    limpiarFila();
                    buscar();
                }
                break;
            case "Inmueble":
                if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_ENTER) {
                    evt.consume(); // Consumir el evento si no es una letra o espacio
                    JOptionPane.showMessageDialog(null, "Solo se pueden poner Numeros");
                } else if (c == KeyEvent.VK_ENTER) {
                    limpiarFila();
                    buscar();
                }
                break;
            case "Vendedor":
                if (!Character.isLetter(c) && c != KeyEvent.VK_SPACE) {
                    evt.consume(); // Consumir el evento = hace que la tecla apretada no se refleje en el textField
                } else if (c == KeyEvent.VK_ENTER) {
                    limpiarFila();
                    buscar();
                }
                break;
            case "Inquilino":
                if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_ENTER) {
                    evt.consume(); // Consumir el evento si no es una letra o espacio
                    JOptionPane.showMessageDialog(null, "Solo se pueden poner Numeros");
                } else if (c == KeyEvent.VK_ENTER) {
                    limpiarFila();
                    buscar();
                }
                break;

            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_jtDatoKeyTyped

    private void jcbOpcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbOpcionActionPerformed
        cambiarInfo();

    }//GEN-LAST:event_jcbOpcionActionPerformed

    private void jtDatoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDatoMouseClicked
        jtDato.setText("");
    }//GEN-LAST:event_jtDatoMouseClicked

    private void jcbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEstadoActionPerformed
        limpiarFila();
        buscar();
    }//GEN-LAST:event_jcbEstadoActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbRenovarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRenovarActionPerformed

        renovar();
    }//GEN-LAST:event_jbRenovarActionPerformed

    private void jbRescindirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRescindirActionPerformed
        rescindir();
    }//GEN-LAST:event_jbRescindirActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        limpiarFila();
        if (jtDato.getText().isEmpty()) {
            cargarTabla();
        } else {
            buscar();
        }
    }//GEN-LAST:event_jbBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarContratos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarContratos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarContratos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarContratos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ListarContratos dialog = new ListarContratos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }

                });
                dialog.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BG;
    private com.toedter.calendar.JYearChooser jAnio;
    private com.toedter.calendar.JMonthChooser jMes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbRenovar;
    private javax.swing.JButton jbRescindir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<String> jcbEstado;
    private javax.swing.JComboBox<String> jcbOpcion;
    private javax.swing.JTable jtContratos;
    private javax.swing.JTextField jtDato;
    // End of variables declaration//GEN-END:variables
    
    private void initFont() {
        Color bgColor = new Color(138, 175, 188);

        jbSalir.setFont(button);
        jbRescindir.setFont(button);
        jbBuscar.setFont(button);
        jbRenovar.setFont(button);

    }
    
    private void renovar() {
        try {
            int fila = jtContratos.getSelectedRow();
            int id = Integer.parseInt(modelo.getValueAt(fila, 0).toString());
            MVendedor.contratoSeleccionado = MVendedor.controlContrato.encontrarContrato(id);
            if (MVendedor.controlContrato.isVigente(MVendedor.contratoSeleccionado.getId())) {
                JOptionPane.showMessageDialog(null, "No se Puede renovar el contrato si hay un contrato Vigente");
            } else {
                AdmContratos renueva = new AdmContratos(null, rootPaneCheckingEnabled);
                renueva.setLocationRelativeTo(null);
                renueva.setVisible(true);
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar una fila primero");

        } finally {
            limpiarFila();
            cargarTabla();
        }
    }

    private void rescindir() {
        try {
            int fila = jtContratos.getSelectedRow();
            int id = Integer.parseInt(modelo.getValueAt(fila, 0).toString());
            Contrato rescindido = MVendedor.controlContrato.encontrarContrato(id);
            Object[] opciones = {"si", "no"};
            int op = JOptionPane.showOptionDialog(null,
                    "¿Esta seguro de rescindir el contrato?",
                    "Confirmacion",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    null, opciones, opciones[1]);
            if (op == JOptionPane.YES_OPTION) {

                rescindido.setEstado("NO VIGENTE");
                MVendedor.controlContrato.editarContrato(rescindido);
                limpiarFila();
                cargarTabla();
            }

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar una fila primero");

        } finally {
            limpiarFila();
            cargarTabla();
        }
    }

    private void llenarCombo() {
        jcbOpcion.addItem("Estado");
        jcbOpcion.addItem("Finalizacion");
        jcbOpcion.addItem("Inicio");
        jcbOpcion.addItem("Propietario");
        jcbOpcion.addItem("Inquilino");
        jcbOpcion.addItem("Vendedor");
        jcbOpcion.addItem("Inmueble");
        
        jcbEstado.addItem("VIGENTE");
        jcbEstado.addItem("NO VIGENTE");
        jcbEstado.addItem("RENOVADO");
    }

    private void cambiarInfo() {
        String opcion = jcbOpcion.getSelectedItem().toString();

        switch (opcion) {
            case "Estado":
                jMes.setVisible(false);
                jAnio.setVisible(false);
                jtDato.setVisible(false);
                jcbEstado.setVisible(true);

                break;
            case "Finalizacion":
                jMes.setVisible(true);
                jAnio.setVisible(true);
                jtDato.setVisible(false);
                jcbEstado.setVisible(false);
                break;
            case "Inicio":
                jMes.setVisible(true);
                jAnio.setVisible(true);
                jtDato.setVisible(false);
                jcbEstado.setVisible(false);
                break;

            case "Propietario":
                jMes.setVisible(false);
                jAnio.setVisible(false);
                jtDato.setVisible(true);
                jcbEstado.setVisible(false);
                jtDato.setText("ingrese el DNI del propietario");
                break;
            case "Inquilino":
                jMes.setVisible(false);
                jAnio.setVisible(false);
                jtDato.setVisible(true);
                jcbEstado.setVisible(false);
                jtDato.setText("ingrese el DNI del Inquilino");
                break;
            case "Vendedor":
                jMes.setVisible(false);
                jAnio.setVisible(false);
                jtDato.setVisible(true);
                jcbEstado.setVisible(false);
                jtDato.setText("Ingrese el nombre de usuario del vendedor");
                break;
            case "Inmueble":
                jMes.setVisible(false);
                jAnio.setVisible(false);
                jtDato.setVisible(true);
                jcbEstado.setVisible(false);
                jtDato.setText("Ingrese el numero de Codigo de la propiedad");
                break;
        }

    }

    private void buscar() {
        String opcion = jcbOpcion.getSelectedItem().toString();
        switch (opcion) {

            case "Estado":
                buscarXEstado();
                break;
            case "Finalizacion":
                buscarXFinalizacion();
                break;
            case "Inicio":
                buscarXInicio();
                break;

            case "Propietario":
                buscarXPropietario();
                break;
            case "Inquilino":
                buscarXInquilino();
                break;
            case "Vendedor":
                buscarXVendedor();
                break;
            case "Inmueble":
                buscarXInmueble();
                break;
        }
    }

    private void buscarXEstado() {
        limpiarFila();
        for (Contrato encontrado : MVendedor.controlContrato.listarContratos()) {
            if (encontrado.getEstado().equalsIgnoreCase((String) jcbEstado.getSelectedItem())) {
                cargarFila(encontrado);
            }
        }

    }

    private void buscarXFinalizacion() {
        limpiarFila();
        int año = jAnio.getYear();
        int mes = jMes.getMonth() + 1;

        for (Contrato encontrado : MVendedor.controlContrato.listarContratos()) {
            if (encontrado.getFechaFinalizacion().getMonthValue() == mes && encontrado.getFechaFinalizacion().getYear() == año) {
                cargarFila(encontrado);
            }
        }
    }

    private void buscarXInicio() {
        limpiarFila();
        int año = jAnio.getYear();
        int mes = jMes.getMonth() + 1;

        for (Contrato encontrado : MVendedor.controlContrato.listarContratos()) {
            if (encontrado.getFechaInicio().getMonthValue() == mes && encontrado.getFechaInicio().getYear() == año) {
                cargarFila(encontrado);
            }
        }

    }

    private void buscarXPropietario() {
        limpiarFila();
        int dni = Integer.parseInt(jtDato.getText());
        for (Contrato encontrado : MVendedor.controlContrato.listarContratosXPropietario(dni)) {
            cargarFila(encontrado);

        }

    }

    private void buscarXInquilino() {
        limpiarFila();
        int dni = Integer.parseInt(jtDato.getText());
        for (Contrato encontrado : MVendedor.controlContrato.listarContratosXInquilno(dni)) {
            cargarFila(encontrado);

        }

    }

    private void buscarXVendedor() {
        limpiarFila();
        for (Contrato encontrado : MVendedor.controlContrato.listarContratosXnombreUSuario(jtDato.getText())) {
            cargarFila(encontrado);
        }
    }

    private void buscarXInmueble() {
        limpiarFila();
        for (Contrato encontrado : MVendedor.controlContrato.listarContratosXInmueble(Integer.parseInt(jtDato.getText()))) {
            cargarFila(encontrado);
        }

    }

    private void cargarFila(Contrato contrato) {
        int codigo = contrato.getId();
        Inmueble alquilado = MVendedor.controlInm.buscarInmuebleXId(contrato.getIdInmueble());
        Persona inquilino = MVendedor.controlPer.encontrarPersonaXId(contrato.getIdInquilino());
        Persona propietario = MVendedor.controlPer.encontrarPersonaXId(alquilado.getIdPropietario());
        Usuario vendedor = controlUsuario.buscarUsuarioxIdPersona(contrato.getIdVendedor());
        LocalDate fechaFirma = contrato.getFecha();
        LocalDate fechaInicio = contrato.getFechaInicio();
        LocalDate fechaFinaliza = contrato.getFechaFinalizacion();
        int precio = contrato.getPrecio();
        String estado = contrato.getEstado();
        String descripcion = contrato.getDescripcion();
        modelo.addRow(new Object[]{
            codigo,
            estado,
            alquilado.getId() + ", " + alquilado.getDireccion(),
            fechaInicio.format(format),
            fechaFinaliza.format(format),
            precio,
            inquilino.getApellido() + ", " + inquilino.getNombre(),
            propietario.getApellido() + ", " + propietario.getNombre(),
            descripcion,
            vendedor.getUsuario()
        });
    }

    private void cabecera() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Estado");
        modelo.addColumn("Propiedad");
        modelo.addColumn("Inicio");
        modelo.addColumn("Finalizacion");
        modelo.addColumn("Precio");
        modelo.addColumn("Inquilino");
        modelo.addColumn("Propietario");
        modelo.addColumn("Condiciones Contrato");
        modelo.addColumn("Vendedor");
        jtContratos.setModel(modelo);
        TableRowSorter<DefaultTableModel> ordenar = new TableRowSorter<>(modelo);
        jtContratos.setRowSorter(ordenar);
    }

    private void limpiarFila() {
        int f = modelo.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    private void cargarTabla() {
        limpiarFila();
        for (Contrato contrato : MVendedor.controlContrato.listarContratos()) {
            cargarFila(contrato);
        }

    }

    private void ajustarAnchoColumnas() {
        for (int column = 0; column < jtContratos.getColumnCount(); column++) {
            TableColumn tableColumn = jtContratos.getColumnModel().getColumn(column);
            int anchoPreferido = tableColumn.getMinWidth();
            int anchoMaximo = tableColumn.getMaxWidth();

            for (int row = 0; row < jtContratos.getRowCount(); row++) {
                TableCellRenderer cellRenderer = jtContratos.getCellRenderer(row, column);
                Component c = jtContratos.prepareRenderer(cellRenderer, row, column);
                int ancho = c.getPreferredSize().width + jtContratos.getIntercellSpacing().width;
                anchoPreferido = Math.max(anchoPreferido, ancho);

                // Ajuste para evitar que el ancho de la columna supere el ancho máximo establecido.
                if (anchoPreferido >= anchoMaximo) {
                    anchoPreferido = anchoMaximo;
                    break;
                }
            }
            tableColumn.setPreferredWidth(anchoPreferido);
        }
    }

//    private void ajustarAnchoColumnasCabecera() {
//        JTableHeader header = jtContratos.getTableHeader();
//        TableCellRenderer defaultRenderer = header.getDefaultRenderer();
//
//        for (int i = 0; i < jtContratos.getColumnCount(); i++) {
//            TableColumn column = jtContratos.getColumnModel().getColumn(i);
//            Component comp = defaultRenderer.getTableCellRendererComponent(jtContratos, column.getHeaderValue(), false, false, 0, 0);
//            int width = comp.getPreferredSize().width;
//            column.setPreferredWidth(width);
//        }
//    }
}
